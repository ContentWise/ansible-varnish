---
varnish_version: "5.2.1"
varnish_rpm_location: "https://packagecloud.io/varnishcache/varnish5/packages/el/7/varnish-{{ varnish_version }}-1.el7.x86_64.rpm/download.rpm"
varnish_deb_location: "https://packagecloud.io/varnishcache/varnish5/packages/ubuntu/xenial/varnish_{{ varnish_version }}-1~xenial_amd64.deb/download.deb"
varnish_listen_port: 6081

varnish_thread_pool_min: 100
varnish_thread_pool_max: 5000
varnish_thread_pool_timeout: 300

varnish_default_vcl_content: |
  #
  # This is an example VCL file for Varnish.
  #
  # It does not do anything by default, delegating control to the
  # builtin VCL. The builtin VCL is called when there is no explicit
  # return statement.
  #
  # See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
  # and https://www.varnish-cache.org/trac/wiki/VCLExamples for more examples.

  # Marker to tell the VCL compiler that this VCL has been adapted to the
  # new 4.0 format.
  vcl 4.0;

  # Default backend definition. Set this to point to your content server.
  backend default {
      .host = "127.0.0.1";
      .port = "8080";
  }

  sub vcl_recv {
      # Happens before we check if we have this in cache already.
      #
      # Typically you clean up the request here, removing cookies you don't need,
      # rewriting the request, etc.
  }

  sub vcl_backend_response {
      # Happens after we have read the response headers from the backend.
      #
      # Here you clean the response headers, removing silly Set-Cookie headers
      # and other mistakes your backend does.
  }

  sub vcl_deliver {
      # Happens when we have all the pieces we need, and are about to send the
      # response to the client.
      #
      # You can do accounting or modifying the final object here.
  }